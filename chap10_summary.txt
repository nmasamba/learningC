

A binary search tree, also known as an ordered binary
tree, is a variant of binary tree in which all the nodes
in the left sub-tree have a value less than that of the
root node and all the nodes in the right sub-tree have
a value either equal to or greater than the root node.
∑ The average running time of a search operation is
O(log2 n). However, in the worst case, a binary search
tree will take O(n) time to search an element from
the tree.
∑ Mirror image of a binary search tree is obtained by
interchanging the left sub-tree with the right sub-tree
at every node of the tree.
∑ In a threaded binary tree, null entries can be replaced
to store a pointer to either the in-order predecessor
or in-order successor of a node.
∑ A one-way threaded tree is also called a single
threaded tree. In a two-way threaded tree, also called
a double threaded tree, threads will appear in both
the left and the right field of the node.
∑ An AVL tree is a self-balancing tree which is also
known as a height-balanced tree. Each node has a
balance factor associated with it, which is calculated
by subtracting the height of the right sub-tree from
the height of the left sub-tree. In a height balanced
tree, every node has a balance factor of either 0, 1,
or –1.
∑ A red-black tree is a self-balancing binary search tree
which is also called as a ‘symmetric binary B-tree’.
Although a red-black tree is complex, it has good
worst case running time for its operations and is
efficient to use, as searching, insertion, and deletion
can all be done in O(log n) time.
∑ A splay tree is a self-balancing binary search tree
with an additional property that recently accessed
elements can be re-accessed fast.